/******************************************************************************
* タ イ ト ル : 
* 説　　　明　: 
* プログラム名: soundal.cpp
* 作　成　者　: AT-13B-284 No.31 中山和馬
* 作　成　日　: 2016/06/17
* 修　正　日　: 
* 変更履歴
* 2016/06/17  : 作成
* 著　作　権　: Copyright(c)2016 nakayama All rights reserved.
******************************************************************************/

/******************************************************************************
* インクルード宣言
******************************************************************************/
#include"soundal.h"

/******************************************************************************
* マクロ定義
******************************************************************************/

/******************************************************************************
* プロトタイプ宣言
******************************************************************************/

/******************************************************************************
* グローバル変数の宣言
******************************************************************************/
ALuint CSoundAL::m_nBuffer[ SOUNDBUFFERMAX ];
ALuint CSoundAL::m_nSource[ SOUNDBUFFERMAX ];

/******************************************************************************
* 関数名: 
* 引　数: 
* 戻り値: 
* 作成日: 2016/06/17
* 修正日: 
* 説　明: コンストラクタ
******************************************************************************/
CSoundAL::CSoundAL()
{
	for( int i = 0; i < SOUNDBUFFERMAX; i ++ )
	{
		m_nSource[ i ] = NULL;
		m_nBuffer[ i ] = NULL;
	}
}

/******************************************************************************
* 関数名: 
* 引　数: 
* 戻り値: 
* 作成日: 2016/06/17
* 修正日: 
* 説　明: デストラクタ
******************************************************************************/
CSoundAL::~CSoundAL()
{
}

/******************************************************************************
* 関数名: Init
* 引　数: void なし
* 戻り値: void なし
* 作成日: 2016/06/17
* 修正日: 
* 説　明: 初期化処理
******************************************************************************/
void CSoundAL::Init( void )
{
	alutInit( NULL, NULL );
	alGenSources( SOUNDBUFFERMAX, m_nSource );
}

/******************************************************************************
* 関数名: Uninit
* 引　数: void なし
* 戻り値: void なし
* 作成日: 2016/06/17
* 修正日: 
* 説　明: 終了処理
******************************************************************************/
void CSoundAL::Uninit( void )
{
	alutExit();
}

/******************************************************************************
* 関数名: Play
* 引　数: void なし
* 戻り値: void なし
* 作成日: 2016/06/17
* 修正日: 
* 説　明: 再生処理
******************************************************************************/
void CSoundAL::Play( int nBuffer, bool bLoop )
{
	ALint state;
	for( int i = 0; i < SOUNDBUFFERMAX; i ++ )
	{
		alGetSourcei( m_nSource[ i ], AL_SOURCE_STATE, &state );
		if( state != AL_PLAYING )
		{
			alSourcei( m_nSource[ i ], AL_BUFFER, m_nBuffer[ nBuffer ] ); // 音データのバッファを指定
			alSourcei( m_nSource[ i ], AL_LOOPING, bLoop ); // ループの設定
			alSourcePlay( m_nSource[ i ] );
			break;
		}
	}
}

/******************************************************************************
* 関数名: Load
* 引　数: const char *filename
* 戻り値: void なし
* 作成日: 2016/06/17
* 修正日: 
* 説　明: 読み込み処理
******************************************************************************/
int CSoundAL::Load( const char *filename )
{
	int id;
	for( id = 0; id < SOUNDBUFFERMAX; id ++ )
	{
		if( m_nBuffer[ id ] == NULL )
		{
			m_nBuffer[ id ] = alutCreateBufferFromFile( filename );
			break;
		}
	}
	return id ;
}

/******************************************************************************
* 関数名: Stop
* 引　数: int nBuffer
* 戻り値: void なし
* 作成日: 2016/11/09
* 修正日: 
* 説　明: 音楽を止める
******************************************************************************/
void CSoundAL::Stop( int nBuffer )
{
	alSourceStop( m_nBuffer[ nBuffer ] );
}

/******************************************************************************
* 関数名: StopAll
* 引　数: int nBuffer
* 戻り値: void なし
* 作成日: 2016/11/11
* 修正日: 
* 説　明: 音楽を止める
******************************************************************************/
void CSoundAL::StopAll( void )
{
	ALint state;
	for( int i = 0; i < SOUNDBUFFERMAX; i ++ )
	{
		alGetSourcei( m_nSource[ i ], AL_SOURCE_STATE, &state );
		if( state == AL_PLAYING )
		{
			alSourceStop( m_nSource[ i ] );
		}
	}
}
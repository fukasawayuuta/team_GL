/*******************************************************************************
* タイトル名：
* ファイル名：fade.cpp
* 作成者	：AT13B284 10 小笠原啓太
* 作成日	：
********************************************************************************
* 更新履歴	：
*
*******************************************************************************/
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "fade.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/
const float WIDTH = SCREEN_WIDTH;
const float HEIGHT = SCREEN_HEIGHT;
const int FADE_COUNT = 30;

/*******************************************************************************
* グローバル変数
*******************************************************************************/
CMode *CFade::m_NextMode;
FADE CFade::m_State = FADE_IN;
int CFade::m_Count;
float CFade::m_Alfa;

/*******************************************************************************
* 関数名：CFade::CFade()
*
* 引数	：
* 戻り値：
* 説明	：コンストラクタ
*******************************************************************************/
CFade::CFade()
{
}

/*******************************************************************************
* 関数名：CFade::~CFade()
*
* 引数	：
* 戻り値：
* 説明	：デストラクタ
*******************************************************************************/
CFade::~CFade()
{
}

/*******************************************************************************
* 関数名：void CFade::Init( void )
*
* 引数	：
* 戻り値：
* 説明	：初期化処理
*******************************************************************************/
void CFade::Init(void)
{
}

/*******************************************************************************
* 関数名：void CFade::Uninit( void )
*
* 引数	：
* 戻り値：
* 説明	：終了処理
*******************************************************************************/
void CFade::Uninit(void)
{
	m_NextMode = NULL;
}

/*******************************************************************************
* 関数名：void CFade::Update( void )
*
* 引数	：
* 戻り値：
* 説明	：更新処理
*******************************************************************************/
void CFade::Update(void)
{
	// フェードの処理
	if (m_State == FADE_IN)
	{// フェードイン
		m_Alfa -= 1.0f / FADE_COUNT;
		if (m_Count > FADE_COUNT)
		{
			m_State = FADE_NONE;
			m_Count = 0;
			m_Alfa = 0.0f;
		}
	}
	else if (m_State == FADE_OUT)
	{// フェードアウト
		m_Alfa += 1.0f / FADE_COUNT;
		if (m_Count > FADE_COUNT)
		{
			CManager::SetMode(m_NextMode);
			m_State = FADE_IN;
			m_Count = 0;
			m_Alfa = 1.0f;
		}
	}
	
	// カウンタ加算
	m_Count++;
}

/*******************************************************************************
* 関数名：void CFade::Draw( void )
*
* 引数	：
* 戻り値：
* 説明	：描画処理
*******************************************************************************/
void CFade::Draw(void)
{
	/* ライトを無効 */
	glDisable(GL_LIGHTING);
	/* デプステストの無効 */
	glDisable(GL_DEPTH_TEST);
	/* プロジェクションマトリクスの設定 */
	glMatrixMode(GL_PROJECTION);							// 射影変換行列設定
	glPushMatrix();											// 現在の射影変換行列を保存
	glLoadIdentity();										// 行列セット
	glOrtho(0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, -1, 1);		// 正射影変換設定

	/* モデルビューマトリクスの設定 */
	glMatrixMode(GL_MODELVIEW);								// モデルビュー変換行列設定
	glPushMatrix();											// 現在のモデルビュー行列を保存
	glLoadIdentity();										// 行列セット

	/* テクスチャオブジェクトの結合 */
	glBindTexture(GL_TEXTURE_2D, 0);

	/* 2Dポリゴン描画開始 */
	glBegin(GL_TRIANGLE_STRIP);

	glColor4f(0.0f, 0.0f, 0.0f, m_Alfa);
	glTexCoord2d(0.0f, 0.0f);
	glVertex3f(0.0f, 0.0f, 0.0f);

	glColor4f(0.0f, 0.0f, 0.0f, m_Alfa);
	glTexCoord2d(1.0f, 0.0f);
	glVertex3f(WIDTH, 0.0f, 0.0f);

	glColor4f(0.0f, 0.0f, 0.0f, m_Alfa);
	glTexCoord2d(0.0f, 1.0f);
	glVertex3f(0.0f, HEIGHT, 0.0f);

	glColor4f(0.0f, 0.0f, 0.0f, m_Alfa);
	glTexCoord2d(1.0f, 1.0f);
	glVertex3f(WIDTH, HEIGHT, 0.0f);

	glEnd();
	/* 2Dポリゴン描画終了 */

	/* テクスチャオブジェクトの結合 */
	glBindTexture(GL_TEXTURE_2D, 0);

	glMatrixMode(GL_PROJECTION);	// 射影変換行列設定
	glPopMatrix();					// 射影変換行列を復元

	glMatrixMode(GL_MODELVIEW);		// モデルビュー変換行列設定
	glPopMatrix();					// モデルビュー行列を復元

	/* ライトを有効 */
	glEnable(GL_LIGHTING);
	/* デプステストを有効 */
	glEnable(GL_DEPTH_TEST);

	glFlush();						// コマンドの強制実行
}

/*******************************************************************************
* 関数名：void CFade::Start( CMode *NextMode )
*
* 引数	：
* 戻り値：
* 説明	：フェード開始処理
*******************************************************************************/
void CFade::Start(CMode *NextMode)
{
	if (m_State == FADE_NONE)
	{
		m_NextMode = NextMode;
		m_State = FADE_OUT;
		m_Count = 0;
		m_Alfa = 0.0f;
	}
}